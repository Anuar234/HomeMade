import asyncio
import sqlite3
import os
import json
from datetime import datetime
from contextlib import contextmanager
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_IDS_STR = os.getenv("ADMIN_IDS")
    ADMIN_IDS = [int(id.strip()) for id in ADMIN_IDS_STR.split(",") if id.strip()]
    DATABASE = os.getenv("DATABASE", "homefood.db")
except:
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
    ADMIN_IDS = [123456789]
    DATABASE = "homefood.db"

# === CONVERSATION STATES ===
(NAME, DESCRIPTION, PRICE, IMAGE, COOK_TELEGRAM, 
 CATEGORY, INGREDIENTS, CONFIRM) = range(8)

# === DATABASE ===
@contextmanager
def get_db():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    finally:
        conn.close()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with get_db() as conn:
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                image TEXT,
                cook_telegram TEXT,
                category TEXT,
                ingredients TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ —Å user_telegram_id
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id TEXT PRIMARY KEY,
                user_telegram_id INTEGER,
                customer_telegram TEXT,
                customer_address TEXT,
                customer_phone TEXT,
                total_amount REAL,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS order_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id TEXT,
                product_id TEXT,
                product_name TEXT,
                quantity INTEGER,
                price REAL,
                cook_telegram TEXT,
                FOREIGN KEY (order_id) REFERENCES orders(id)
            )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ user_telegram_id (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –ë–î)
        cursor.execute("PRAGMA table_info(orders)")
        columns = [column[1] for column in cursor.fetchall()]
        if 'user_telegram_id' not in columns:
            print("üîÑ Migrating database: adding user_telegram_id column...")
            cursor.execute('ALTER TABLE orders ADD COLUMN user_telegram_id INTEGER')
        
        conn.commit()

# === HELPER FUNCTIONS ===
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def format_order(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    status_emoji = {
        'pending': 'üïê',
        'confirmed': '‚úÖ',
        'cooking': 'üë®‚Äçüç≥',
        'ready': 'üéâ',
        'delivered': 'üì¶',
        'cancelled': '‚ùå'
    }
    
    status_names = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'cooking': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': '–ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    
    emoji = status_emoji.get(order['status'], '‚ùì')
    status_name = status_names.get(order['status'], order['status'])
    
    items_text = ""
    if order.get('items_data'):
        for item_str in order['items_data'].split(','):
            parts = item_str.split(':')
            product_name = parts[1] if len(parts) > 1 else '–ü—Ä–æ–¥—É–∫—Ç'
            quantity = parts[2] if len(parts) > 2 else '0'
            price = parts[3] if len(parts) > 3 else '0'
            cook_telegram = parts[4] if len(parts) > 4 else ''
            
            cook_info = f" (üë®‚Äçüç≥ @{cook_telegram})" if cook_telegram else ""
            items_text += f"  ‚Ä¢ {product_name} x{quantity} = {price} AED{cook_info}\n"
    
    created = datetime.fromisoformat(order['created_at']).strftime('%d.%m.%Y %H:%M')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    user_info = ""
    if order.get('customer_telegram'):
        user_info = f"üë§ <b>Telegram:</b> @{order['customer_telegram']}\n"
    
    return f"""
üìã <b>–ó–∞–∫–∞–∑ #{order['id'][:8]}</b>
{emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_name}

{user_info}üìç <b>–ê–¥—Ä–µ—Å:</b> {order.get('customer_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üõí <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
{items_text}
üí∞ <b>–ò—Ç–æ–≥–æ:</b> {order['total_amount']} AED

üïê <b>–°–æ–∑–¥–∞–Ω:</b> {created}
"""

async def notify_user_status_change(application, order_id: str, new_status: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_telegram, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.id = ?
                GROUP BY o.id
            ''', (order_id,))
            order = cursor.fetchone()
            
            if not order or not order['user_telegram_id']:
                return
            
            order = dict(order)
            user_id = order['user_telegram_id']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status_messages = {
                'confirmed': '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!',
                'cooking': 'üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è!',
                'ready': 'üéâ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å.',
                'delivered': 'üì¶ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!',
                'cancelled': '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.'
            }
            
            status_message = status_messages.get(new_status, f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}')
            
            message = f"""
üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

{status_message}

{format_order(order)}
"""
            
            await application.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
            
    except Exception as e:
        print(f"Error sending notification to user: {e}")

# === COMMAND HANDLERS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id

    not_admin_keyboard = [
        [InlineKeyboardButton("üç± –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", url="https://homemade-production.up.railway.app/app")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/sekeww")],
    ]
    
    if not is_admin(user_id):
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>HomeMade</b> ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤–∫—É—Å –∏ —É—é—Ç –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø—Ä—è–º–æ —É —Ç–µ–±—è –¥–æ–º–∞ üç≤\n\n"
            "üì± –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω—é—é –µ–¥—É, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—É—é —Å –ª—é–±–æ–≤—å—é. –í—Å—ë –ø—Ä–æ—Å—Ç–æ ‚Äî –≤—ã–±–∏—Ä–∞–π, –∑–∞–∫–∞–∑—ã–≤–∞–π –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è üòã\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(not_admin_keyboard)
        )
        return
    
    keyboard = [
        [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_all")],
        [InlineKeyboardButton("üïê –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_pending")],
        [InlineKeyboardButton("üë®‚Äçüç≥ –í —Ä–∞–±–æ—Ç–µ", callback_data="orders_cooking")],
        [InlineKeyboardButton("üçΩÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", callback_data="menu_manage")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üçΩÔ∏è <b>HomeMade Admin Panel</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —à–µ—Ñ üë®‚Äçüç≥\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not is_admin(update.effective_user.id):
        return
    
    help_text = """
ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/orders - –í—Å–µ –∑–∞–∫–∞–∑—ã
/pending - –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
/addproduct - –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ
/products - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–ª—é–¥
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""
    await update.message.reply_text(help_text, parse_mode='HTML')

async def orders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
    if not is_admin(update.effective_user.id):
        return
    
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.*, 
                   GROUP_CONCAT(
                       oi.product_id || ':' || oi.product_name || ':' || 
                       oi.quantity || ':' || oi.price || ':' || 
                       COALESCE(oi.cook_telegram, '')
                   ) as items_data
            FROM orders o
            LEFT JOIN order_items oi ON o.id = oi.order_id
            GROUP BY o.id
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        orders = [dict(row) for row in cursor.fetchall()]
    
    if not orders:
        await update.message.reply_text("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    await update.message.reply_text(
        f"üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(orders)} –∑–∞–∫–∞–∑–æ–≤:</b>",
        parse_mode='HTML'
    )
    
    for order in orders:
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            format_order(order),
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pending - –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"""
    if not is_admin(update.effective_user.id):
        return
    
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.*, 
                   GROUP_CONCAT(
                       oi.product_id || ':' || oi.product_name || ':' || 
                       oi.quantity || ':' || oi.price || ':' || 
                       COALESCE(oi.cook_telegram, '')
                   ) as items_data
            FROM orders o
            LEFT JOIN order_items oi ON o.id = oi.order_id
            WHERE o.status = 'pending'
            GROUP BY o.id
            ORDER BY o.created_at DESC
        ''')
        orders = [dict(row) for row in cursor.fetchall()]
    
    if not orders:
        await update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
        return
    
    await update.message.reply_text(
        f"üïê <b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}</b>",
        parse_mode='HTML'
    )
    
    for order in orders:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"status_{order['id']}_confirmed"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order['id']}_cancelled")
            ],
            [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            format_order(order),
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    with get_db() as conn:
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) as count FROM orders')
        total_orders = cursor.fetchone()['count']
        
        cursor.execute('''
            SELECT status, COUNT(*) as count, SUM(total_amount) as total
            FROM orders
            GROUP BY status
        ''')
        status_stats = cursor.fetchall()
        
        cursor.execute('SELECT SUM(total_amount) as total FROM orders')
        total_amount = cursor.fetchone()['total'] or 0
        
        cursor.execute('''
            SELECT COUNT(*) as count, SUM(total_amount) as total
            FROM orders
            WHERE DATE(created_at) = DATE('now')
        ''')
        today = cursor.fetchone()
        
        cursor.execute('SELECT COUNT(*) as count FROM products')
        total_products = cursor.fetchone()['count']
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Home Food</b>

üì¶ <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {total_orders}
üçΩÔ∏è <b>–ë–ª—é–¥ –≤ –º–µ–Ω—é:</b> {total_products}
üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_amount:.1f} AED

<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>
"""
    
    status_emoji = {
        'pending': 'üïê',
        'confirmed': '‚úÖ',
        'cooking': 'üë®‚Äçüç≥',
        'ready': 'üéâ',
        'delivered': 'üì¶',
        'cancelled': '‚ùå'
    }
    
    for stat in status_stats:
        emoji = status_emoji.get(stat['status'], '‚ùì')
        stats_text += f"{emoji} {stat['status']}: {stat['count']} ({stat['total']:.1f} AED)\n"
    
    stats_text += f"\nüìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b> {today['count']} –∑–∞–∫–∞–∑–æ–≤ ({today['total'] or 0:.1f} AED)"
    
    await update.message.reply_text(stats_text, parse_mode='HTML')

# === PRODUCT MANAGEMENT ===
async def products_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–ª—é–¥–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM products ORDER BY category, name')
        products = [dict(row) for row in cursor.fetchall()]
    
    if not products:
        await update.message.reply_text("üçΩÔ∏è –ú–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addproduct –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥.")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for p in products:
        cat = p['category'] or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        if cat not in categories:
            categories[cat] = []
        categories[cat].append(p)
    
    text = "üçΩÔ∏è <b>–í—Å–µ –±–ª—é–¥–∞ –≤ –º–µ–Ω—é:</b>\n\n"
    
    for cat, items in categories.items():
        text += f"<b>üìÇ {cat.upper()}</b>\n"
        for p in items:
            text += f"‚Ä¢ {p['name']} - {p['price']} AED\n"
        text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_product")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", callback_data="delete_product_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, parse_mode='HTML', reply_markup=reply_markup)

async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    query = update.callback_query
    
    if query:
        await query.answer()
        if not is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return ConversationHandler.END
        message = query.message
    else:
        if not is_admin(update.effective_user.id):
            return ConversationHandler.END
        message = update.message
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data['new_product'] = {}
    
    await message.reply_text(
        "üçΩÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 8\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞</b>:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–º–∞—à–Ω–∏–µ –ø–µ–ª—å–º–µ–Ω–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML'
    )
    
    return NAME

async def product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    context.user_data['new_product']['name'] = update.message.text
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{update.message.text}</b>\n\n"
        "–®–∞–≥ 2 –∏–∑ 8\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞</b>:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ—á–Ω—ã–µ –ø–µ–ª—å–º–µ–Ω–∏ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–≤–∏–Ω–∏–Ω–æ–π, –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏",
        parse_mode='HTML'
    )
    
    return DESCRIPTION

async def product_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    context.user_data['new_product']['description'] = update.message.text
    
    await update.message.reply_text(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "–®–∞–≥ 3 –∏–∑ 8\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É –≤ AED</b> (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25",
        parse_mode='HTML'
    )
    
    return PRICE

async def product_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
    try:
        price = float(update.message.text)
        if price <= 0:
            raise ValueError
        
        context.user_data['new_product']['price'] = price
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞: <b>{price} AED</b>\n\n"
            "–®–∞–≥ 4 –∏–∑ 8\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞</b>:\n\n"
            "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Å Unsplash, Imgur –∏ —Ç.–¥.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: https://images.unsplash.com/photo-1234567890",
            parse_mode='HTML'
        )
        
        return IMAGE
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25 –∏–ª–∏ 35.5"
        )
        return PRICE

async def product_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    image_url = update.message.text
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not (image_url.startswith('http://') or image_url.startswith('https://')):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://"
        )
        return IMAGE
    
    context.user_data['new_product']['image'] = image_url
    
    await update.message.reply_text(
        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "–®–∞–≥ 5 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>Telegram username –ø–æ–≤–∞—Ä–∞</b> (–±–µ–∑ @):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: turlubay",
        parse_mode='HTML'
    )
    
    return COOK_TELEGRAM

async def product_cook_telegram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Telegram username –ø–æ–≤–∞—Ä–∞"""
    telegram_username = update.message.text.replace('@', '').strip()
    
    if not telegram_username:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram username"
        )
        return COOK_TELEGRAM
    
    context.user_data['new_product']['cook_telegram'] = telegram_username
    
    keyboard = [
        [InlineKeyboardButton("üçî burger", callback_data="cat_burger")],
        [InlineKeyboardButton("üçï pizza", callback_data="cat_pizza")],
        [InlineKeyboardButton("üçö plov", callback_data="cat_plov")],
        [InlineKeyboardButton("üç≤ soup", callback_data="cat_soup")],
        [InlineKeyboardButton("ü•ü pelmeni", callback_data="cat_pelmeni")],
        [InlineKeyboardButton("ü•ñ khachapuri", callback_data="cat_khachapuri")],
        [InlineKeyboardButton("üç∞ dessert", callback_data="cat_dessert")],
        [InlineKeyboardButton("ü•ó salad", callback_data="cat_salad")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ Telegram: <b>@{telegram_username}</b>\n\n"
        "–®–∞–≥ 6 –∏–∑ 7\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞</b>:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    return CATEGORY

async def product_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = query.data.replace('cat_', '')
    context.user_data['new_product']['category'] = category
    
    await query.edit_message_text(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n\n"
        "–®–∞–≥ 7 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú—É–∫–∞, –Ø–π—Ü–æ, –ì–æ–≤—è–¥–∏–Ω–∞, –°–≤–∏–Ω–∏–Ω–∞, –õ—É–∫, –°–æ–ª—å, –ü–µ—Ä–µ—Ü",
        parse_mode='HTML'
    )
    
    return INGREDIENTS

async def product_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
    ingredients_str = update.message.text
    ingredients_list = [ing.strip() for ing in ingredients_str.split(',')]
    
    context.user_data['new_product']['ingredients'] = json.dumps(ingredients_list, ensure_ascii=False)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
    product = context.user_data['new_product']
    
    preview = f"""
üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–ª—é–¥–∞:</b>

üçΩÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['description']}
üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} AED
üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {product['image'][:50]}...
üë®‚Äçüç≥ <b>–ü–æ–≤–∞—Ä:</b> @{product['cook_telegram']}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category']}
ü•ò <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> {', '.join(ingredients_list[:5])}{'...' if len(ingredients_list) > 5 else ''}

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_product"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_product")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(preview, reply_markup=reply_markup, parse_mode='HTML')
    
    return CONFIRM

async def save_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –ë–î"""
    query = update.callback_query
    await query.answer()
    
    product = context.user_data.get('new_product')
    
    if not product:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT MAX(CAST(id AS INTEGER)) as max_id FROM products WHERE id NOT LIKE "%-%"')
        result = cursor.fetchone()
        new_id = str((result['max_id'] or 0) + 1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        cursor.execute('''
            INSERT INTO products (id, name, description, price, image, cook_telegram, category, ingredients)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            new_id,
            product['name'],
            product['description'],
            product['price'],
            product['image'],
            product['cook_telegram'],
            product['category'],
            product['ingredients']
        ))
        conn.commit()
    
    await query.edit_message_text(
        f"‚úÖ <b>–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
        f"ID: {new_id}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
        f"–¶–µ–Ω–∞: {product['price']} AED\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –º–∏–Ω–∏-–∞–ø–ø–µ!",
        parse_mode='HTML'
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END

async def cancel_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query if update.callback_query else None
    
    if query:
        await query.answer()
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    context.user_data.clear()
    return ConversationHandler.END

# === CALLBACK HANDLERS ===
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if data == "my_orders":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_telegram, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_telegram_id = ?
                GROUP BY o.id
                ORDER BY o.created_at DESC
                LIMIT 10
            ''', (user_id,))
            orders = [dict(row) for row in cursor.fetchall()]

        if not orders:
            await query.edit_message_text(
                "üì≠ <b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
                "–û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑! üçΩÔ∏è",
                parse_mode='HTML'
            )
            return

        await query.edit_message_text(
            f"üì¶ <b>–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã ({len(orders)})</b>",
            parse_mode='HTML'
        )

        for order in orders:
            keyboard = [
                [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.reply_text(
                format_order(order),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        return

    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if not is_admin(user_id):
        not_admin_keyboard = [
            [InlineKeyboardButton("üç± –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", url="https://homemade-production.up.railway.app/app")],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/sekeww")],
        ]
        await query.edit_message_text(
            "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>HomeMade</b> ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤–∫—É—Å –∏ —É—é—Ç –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø—Ä—è–º–æ —É —Ç–µ–±—è –¥–æ–º–∞ üç≤\n\n"
            "üì± –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω—é—é –µ–¥—É, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—É—é —Å –ª—é–±–æ–≤—å—é. –í—Å—ë –ø—Ä–æ—Å—Ç–æ ‚Äî –≤—ã–±–∏—Ä–∞–π, –∑–∞–∫–∞–∑—ã–≤–∞–π –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è üòã\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(not_admin_keyboard)
        )
        return
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
    if data == "menu_manage":
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_product")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –±–ª—é–¥", callback_data="list_products")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", callback_data="delete_product_list")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üçΩÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return
    
    # –°–ø–∏—Å–æ–∫ –±–ª—é–¥
    if data == "list_products":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) as count FROM products')
            count = cursor.fetchone()['count']
        
        await query.edit_message_text(
            f"üçΩÔ∏è –í –º–µ–Ω—é <b>{count}</b> –±–ª—é–¥\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /products –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            parse_mode='HTML'
        )
        return
    
    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_all")],
            [InlineKeyboardButton("üïê –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_pending")],
            [InlineKeyboardButton("üë®‚Äçüç≥ –í —Ä–∞–±–æ—Ç–µ", callback_data="orders_cooking")],
            [InlineKeyboardButton("üçΩÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", callback_data="menu_manage")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üçΩÔ∏è <b>Home Food Admin Panel</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
    if data == "orders_all":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_telegram, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                GROUP BY o.id
                ORDER BY o.created_at DESC
                LIMIT 5
            ''')
            orders = [dict(row) for row in cursor.fetchall()]
        
        if not orders:
            await query.edit_message_text("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        await query.edit_message_text(f"üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(orders)} –∑–∞–∫–∞–∑–æ–≤</b>", parse_mode='HTML')
        
        for order in orders:
            keyboard = [
                [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                format_order(order),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    elif data == "orders_pending":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_telegram, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.status = 'pending'
                GROUP BY o.id
                ORDER BY o.created_at DESC
            ''')
            orders = [dict(row) for row in cursor.fetchall()]
        
        if not orders:
            await query.edit_message_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
            return
        
        await query.edit_message_text(f"üïê <b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}</b>", parse_mode='HTML')
        
        for order in orders:
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"status_{order['id']}_confirmed"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order['id']}_cancelled")
                ],
                [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                format_order(order),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ
    elif data == "orders_cooking":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_telegram, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.status IN ('confirmed', 'cooking')
                GROUP BY o.id
                ORDER BY o.created_at DESC
            ''')
            orders = [dict(row) for row in cursor.fetchall()]
        
        if not orders:
            await query.edit_message_text("üì≠ –ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç")
            return
        
        await query.edit_message_text(f"üë®‚Äçüç≥ <b>–ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: {len(orders)}</b>", parse_mode='HTML')
        
        for order in orders:
            keyboard = [
                [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                format_order(order),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif data == "stats":
        with get_db() as conn:
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) as count FROM orders')
            total_orders = cursor.fetchone()['count']
            
            cursor.execute('''
                SELECT status, COUNT(*) as count, SUM(total_amount) as total
                FROM orders
                GROUP BY status
            ''')
            status_stats = cursor.fetchall()
            
            cursor.execute('SELECT SUM(total_amount) as total FROM orders')
            total_amount = cursor.fetchone()['total'] or 0
            
            cursor.execute('''
                SELECT COUNT(*) as count, SUM(total_amount) as total
                FROM orders
                WHERE DATE(created_at) = DATE('now')
            ''')
            today = cursor.fetchone()
            
            cursor.execute('SELECT COUNT(*) as count FROM products')
            total_products = cursor.fetchone()['count']
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
üçΩÔ∏è –ë–ª—é–¥ –≤ –º–µ–Ω—é: {total_products}
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.1f} AED

<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>
"""
        
        status_emoji = {
            'pending': 'üïê', 'confirmed': '‚úÖ', 'cooking': 'üë®‚Äçüç≥',
            'ready': 'üéâ', 'delivered': 'üì¶', 'cancelled': '‚ùå'
        }
        
        for stat in status_stats:
            emoji = status_emoji.get(stat['status'], '‚ùì')
            stats_text += f"{emoji} {stat['status']}: {stat['count']} ({stat['total']:.1f} AED)\n"
        
        stats_text += f"\nüìÖ –°–µ–≥–æ–¥–Ω—è: {today['count']} –∑–∞–∫–∞–∑–æ–≤ ({today['total'] or 0:.1f} AED)"
        
        await query.edit_message_text(stats_text, parse_mode='HTML')
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    elif data.startswith("order_detail_"):
        order_id = data.replace("order_detail_", "")
        
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_telegram, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.id = ?
                GROUP BY o.id
            ''', (order_id,))
            order = cursor.fetchone()
        
        if not order:
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        order = dict(order)
        
        # –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_admin(user_id):
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"status_{order_id}_confirmed"),
                    InlineKeyboardButton("üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data=f"status_{order_id}_cooking")
                ],
                [
                    InlineKeyboardButton("üéâ –ì–æ—Ç–æ–≤", callback_data=f"status_{order_id}_ready"),
                    InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"status_{order_id}_delivered")
                ],
                [
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order_id}_cancelled")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_all")
                ]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üîô –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º", callback_data="my_orders")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            format_order(order),
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    elif data.startswith("status_"):
        parts = data.split("_")
        order_id = parts[1]
        new_status = parts[2]
        
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
                (new_status, order_id)
            )
            conn.commit()
            
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_telegram, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.id = ?
                GROUP BY o.id
            ''', (order_id,))
            order = dict(cursor.fetchone())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await notify_user_status_change(context.application, order_id, new_status)
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_all")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n{format_order(order)}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
    elif data == "delete_product_list":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT id, name, category, price FROM products ORDER BY category, name LIMIT 20')
            products = [dict(row) for row in cursor.fetchall()]
        
        if not products:
            await query.edit_message_text("üçΩÔ∏è –ú–µ–Ω—é –ø—É—Å—Ç–æ–µ, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å")
            return
        
        keyboard = []
        for p in products:
            keyboard.append([InlineKeyboardButton(
                f"üóëÔ∏è {p['name']} ({p['price']} AED)",
                callback_data=f"delete_prod_{p['id']}"
            )])
        keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="menu_manage")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    elif data.startswith("delete_prod_"):
        product_id = data.replace("delete_prod_", "")
        
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT name FROM products WHERE id = ?', (product_id,))
            product = cursor.fetchone()
            
            if product:
                cursor.execute('DELETE FROM products WHERE id = ?', (product_id,))
                conn.commit()
                await query.edit_message_text(
                    f"‚úÖ –ë–ª—é–¥–æ <b>{product['name']}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–µ–Ω—é",
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def create_application():
    """–°–æ–∑–¥–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å application –±–µ–∑ –∑–∞–ø—É—Å–∫–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN!")
        return None
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    add_product_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(add_product_start, pattern="^add_product$"),
            CommandHandler("addproduct", add_product_start)
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_name)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_description)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_price)],
            IMAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_image)],
            COOK_TELEGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_cook_telegram)],
            CATEGORY: [CallbackQueryHandler(product_category, pattern="^cat_")],
            INGREDIENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_ingredients)],
            CONFIRM: [
                CallbackQueryHandler(save_product, pattern="^save_product$"),
                CallbackQueryHandler(cancel_product, pattern="^cancel_product$")
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_product),
            CallbackQueryHandler(cancel_product, pattern="^cancel_product$")
        ],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(add_product_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("orders", orders_command))
    application.add_handler(CommandHandler("pending", pending_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("products", products_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    return application

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –∫–æ–¥–µ!")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É @BotFather")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        return
    
    if ADMIN_IDS == [123456789]:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à Telegram ID –≤ ADMIN_IDS!")
        print("–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @userinfobot —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE}")
    print(f"üë• –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    application = create_application()
    
    if application:
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()