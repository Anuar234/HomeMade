import asyncio
import sqlite3
import os
from datetime import datetime
from contextlib import contextmanager
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    BOT_TOKEN = os.getenv("BOT_TOKEN", "8349545325:AAFdqJ5Tni7ZzC_owo_8fBQe2n0rXq46m_Q")
    ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "795821176")
    ADMIN_IDS = [int(id.strip()) for id in ADMIN_IDS_STR.split(",") if id.strip()]
    DATABASE = os.getenv("DATABASE", "homefood.db")
except:
    # –ï—Å–ª–∏ –Ω–µ—Ç python-dotenv –∏–ª–∏ .env —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
    ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    DATABASE = "homefood.db"

# === DATABASE ===
@contextmanager
def get_db():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    finally:
        conn.close()

# === HELPER FUNCTIONS ===
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def format_order(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    status_emoji = {
        'pending': 'üïê',
        'confirmed': '‚úÖ',
        'cooking': 'üë®‚Äçüç≥',
        'ready': 'üéâ',
        'delivered': 'üì¶',
        'cancelled': '‚ùå'
    }
    
    status_names = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'cooking': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': '–ì–æ—Ç–æ–≤',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    
    emoji = status_emoji.get(order['status'], '‚ùì')
    status_name = status_names.get(order['status'], order['status'])
    
    # –ü–∞—Ä—Å–∏–º items
    items_text = ""
    if order.get('items_data'):
        for item_str in order['items_data'].split(','):
            parts = item_str.split(':')
            product_name = parts[1] if len(parts) > 1 else '–ü—Ä–æ–¥—É–∫—Ç'
            quantity = parts[2] if len(parts) > 2 else '0'
            price = parts[3] if len(parts) > 3 else '0'
            items_text += f"  ‚Ä¢ {product_name} x{quantity} = {price} AED\n"
    
    created = datetime.fromisoformat(order['created_at']).strftime('%d.%m.%Y %H:%M')
    
    return f"""
üìã <b>–ó–∞–∫–∞–∑ #{order['id'][:8]}</b>
{emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_name}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order['customer_name']}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order['customer_phone']}
üìç <b>–ê–¥—Ä–µ—Å:</b> {order['customer_address']}

üõí <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
{items_text}
üí∞ <b>–ò—Ç–æ–≥–æ:</b> {order['total_amount']} AED

üïê <b>–°–æ–∑–¥–∞–Ω:</b> {created}
"""

# === COMMAND HANDLERS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n"
            f"–í–∞—à ID: {user_id}"
        )
        return
    
    keyboard = [
        [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_all")],
        [InlineKeyboardButton("üïê –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_pending")],
        [InlineKeyboardButton("üë®‚Äçüç≥ –í —Ä–∞–±–æ—Ç–µ", callback_data="orders_cooking")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üçΩÔ∏è <b>Home Food Admin Panel</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not is_admin(update.effective_user.id):
        return
    
    help_text = """
ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/orders - –í—Å–µ –∑–∞–∫–∞–∑—ã
/pending - –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
"""
    await update.message.reply_text(help_text, parse_mode='HTML')

async def orders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
    if not is_admin(update.effective_user.id):
        return
    
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.*, 
                   GROUP_CONCAT(
                       oi.product_id || ':' || oi.product_name || ':' || 
                       oi.quantity || ':' || oi.price || ':' || 
                       COALESCE(oi.cook_name, '') || ':' || COALESCE(oi.cook_phone, '')
                   ) as items_data
            FROM orders o
            LEFT JOIN order_items oi ON o.id = oi.order_id
            GROUP BY o.id
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        orders = [dict(row) for row in cursor.fetchall()]
    
    if not orders:
        await update.message.reply_text("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    await update.message.reply_text(
        f"üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(orders)} –∑–∞–∫–∞–∑–æ–≤:</b>",
        parse_mode='HTML'
    )
    
    for order in orders:
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            format_order(order),
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pending - –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"""
    if not is_admin(update.effective_user.id):
        return
    
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.*, 
                   GROUP_CONCAT(
                       oi.product_id || ':' || oi.product_name || ':' || 
                       oi.quantity || ':' || oi.price || ':' || 
                       COALESCE(oi.cook_name, '') || ':' || COALESCE(oi.cook_phone, '')
                   ) as items_data
            FROM orders o
            LEFT JOIN order_items oi ON o.id = oi.order_id
            WHERE o.status = 'pending'
            GROUP BY o.id
            ORDER BY o.created_at DESC
        ''')
        orders = [dict(row) for row in cursor.fetchall()]
    
    if not orders:
        await update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
        return
    
    await update.message.reply_text(
        f"üïê <b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}</b>",
        parse_mode='HTML'
    )
    
    for order in orders:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"status_{order['id']}_confirmed"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order['id']}_cancelled")
            ],
            [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            format_order(order),
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    with get_db() as conn:
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('SELECT COUNT(*) as count FROM orders')
        total_orders = cursor.fetchone()['count']
        
        # –ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute('''
            SELECT status, COUNT(*) as count, SUM(total_amount) as total
            FROM orders
            GROUP BY status
        ''')
        status_stats = cursor.fetchall()
        
        # –û–±—â–∞—è —Å—É–º–º–∞
        cursor.execute('SELECT SUM(total_amount) as total FROM orders')
        total_amount = cursor.fetchone()['total'] or 0
        
        # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        cursor.execute('''
            SELECT COUNT(*) as count, SUM(total_amount) as total
            FROM orders
            WHERE DATE(created_at) = DATE('now')
        ''')
        today = cursor.fetchone()
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Home Food</b>

üì¶ <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {total_orders}
üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_amount:.1f} AED

<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>
"""
    
    status_emoji = {
        'pending': 'üïê',
        'confirmed': '‚úÖ',
        'cooking': 'üë®‚Äçüç≥',
        'ready': 'üéâ',
        'delivered': 'üì¶',
        'cancelled': '‚ùå'
    }
    
    for stat in status_stats:
        emoji = status_emoji.get(stat['status'], '‚ùì')
        stats_text += f"{emoji} {stat['status']}: {stat['count']} ({stat['total']:.1f} AED)\n"
    
    stats_text += f"\nüìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b> {today['count']} –∑–∞–∫–∞–∑–æ–≤ ({today['total'] or 0:.1f} AED)"
    
    await update.message.reply_text(stats_text, parse_mode='HTML')

# === CALLBACK HANDLERS ===
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    data = query.data
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
    if data == "orders_all":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_name, '') || ':' || COALESCE(oi.cook_phone, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                GROUP BY o.id
                ORDER BY o.created_at DESC
                LIMIT 5
            ''')
            orders = [dict(row) for row in cursor.fetchall()]
        
        if not orders:
            await query.edit_message_text("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        await query.edit_message_text(f"üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(orders)} –∑–∞–∫–∞–∑–æ–≤</b>", parse_mode='HTML')
        
        for order in orders:
            keyboard = [
                [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                format_order(order),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    elif data == "orders_pending":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_name, '') || ':' || COALESCE(oi.cook_phone, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.status = 'pending'
                GROUP BY o.id
                ORDER BY o.created_at DESC
            ''')
            orders = [dict(row) for row in cursor.fetchall()]
        
        if not orders:
            await query.edit_message_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
            return
        
        await query.edit_message_text(f"üïê <b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}</b>", parse_mode='HTML')
        
        for order in orders:
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"status_{order['id']}_confirmed"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order['id']}_cancelled")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                format_order(order),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ
    elif data == "orders_cooking":
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_name, '') || ':' || COALESCE(oi.cook_phone, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.status IN ('confirmed', 'cooking')
                GROUP BY o.id
                ORDER BY o.created_at DESC
            ''')
            orders = [dict(row) for row in cursor.fetchall()]
        
        if not orders:
            await query.edit_message_text("üì≠ –ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç")
            return
        
        await query.edit_message_text(f"üë®‚Äçüç≥ <b>–ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: {len(orders)}</b>", parse_mode='HTML')
        
        for order in orders:
            keyboard = [
                [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order['id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                format_order(order),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif data == "stats":
        with get_db() as conn:
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) as count FROM orders')
            total_orders = cursor.fetchone()['count']
            
            cursor.execute('''
                SELECT status, COUNT(*) as count, SUM(total_amount) as total
                FROM orders
                GROUP BY status
            ''')
            status_stats = cursor.fetchall()
            
            cursor.execute('SELECT SUM(total_amount) as total FROM orders')
            total_amount = cursor.fetchone()['total'] or 0
            
            cursor.execute('''
                SELECT COUNT(*) as count, SUM(total_amount) as total
                FROM orders
                WHERE DATE(created_at) = DATE('now')
            ''')
            today = cursor.fetchone()
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.1f} AED

<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>
"""
        
        status_emoji = {
            'pending': 'üïê', 'confirmed': '‚úÖ', 'cooking': 'üë®‚Äçüç≥',
            'ready': 'üéâ', 'delivered': 'üì¶', 'cancelled': '‚ùå'
        }
        
        for stat in status_stats:
            emoji = status_emoji.get(stat['status'], '‚ùì')
            stats_text += f"{emoji} {stat['status']}: {stat['count']} ({stat['total']:.1f} AED)\n"
        
        stats_text += f"\nüìÖ –°–µ–≥–æ–¥–Ω—è: {today['count']} –∑–∞–∫–∞–∑–æ–≤ ({today['total'] or 0:.1f} AED)"
        
        await query.edit_message_text(stats_text, parse_mode='HTML')
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    elif data.startswith("order_detail_"):
        order_id = data.replace("order_detail_", "")
        
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_name, '') || ':' || COALESCE(oi.cook_phone, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.id = ?
                GROUP BY o.id
            ''', (order_id,))
            order = cursor.fetchone()
        
        if not order:
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        order = dict(order)
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"status_{order_id}_confirmed"),
                InlineKeyboardButton("üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data=f"status_{order_id}_cooking")
            ],
            [
                InlineKeyboardButton("üéâ –ì–æ—Ç–æ–≤", callback_data=f"status_{order_id}_ready"),
                InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"status_{order_id}_delivered")
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order_id}_cancelled")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_all")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            format_order(order),
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    elif data.startswith("status_"):
        parts = data.split("_")
        order_id = parts[1]
        new_status = parts[2]
        
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE orders SET status = ? WHERE id = ?',
                (new_status, order_id)
            )
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            cursor.execute('''
                SELECT o.*, 
                       GROUP_CONCAT(
                           oi.product_id || ':' || oi.product_name || ':' || 
                           oi.quantity || ':' || oi.price || ':' || 
                           COALESCE(oi.cook_name, '') || ':' || COALESCE(oi.cook_phone, '')
                       ) as items_data
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.id = ?
                GROUP BY o.id
            ''', (order_id,))
            order = dict(cursor.fetchone())
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_detail_{order_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_all")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n{format_order(order)}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

# === MAIN ===
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –∫–æ–¥–µ!")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É @BotFather")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        return
    
    if ADMIN_IDS == [123456789]:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à Telegram ID –≤ ADMIN_IDS!")
        print("–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @userinfobot —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE}")
    print(f"üë• –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("orders", orders_command))
    application.add_handler(CommandHandler("pending", pending_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()