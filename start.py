#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Home Food Abu Dhabi
–ó–∞–ø—É—Å–∫–∞–µ—Ç FastAPI –∏ Telegram Bot –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ

–í–ê–ñ–ù–û: –û–±–Ω–æ–≤–∏—Ç–µ Procfile:
web: python start.py

–≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –∏ API, –∏ –±–æ—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ!
"""

import os
import sys
import asyncio
import threading
from contextlib import asynccontextmanager

print("=" * 50)
print("üçΩÔ∏è  Home Food Abu Dhabi - Starting...")
print("=" * 50)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8000))

if not BOT_TOKEN:
    print("‚ö†Ô∏è  WARNING: BOT_TOKEN not set! Bot will not work.")
    print("   Set it in Railway environment variables")
else:
    print(f"‚úÖ BOT_TOKEN: {BOT_TOKEN[:10]}...")

print(f"‚úÖ PORT: {PORT}")
print(f"‚úÖ ADMIN_IDS: {os.getenv('ADMIN_IDS', 'Not set')}")
print("=" * 50)


def run_bot_in_thread():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞"""
    if not BOT_TOKEN:
        print("‚ùå Skipping bot - no BOT_TOKEN")
        return
    
    try:
        print("ü§ñ Starting Telegram Bot thread...")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
        import bot
        from telegram import Update
        
        print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: homefood.db")
        print(f"üë• –ê–¥–º–∏–Ω—ã: {bot.ADMIN_IDS}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
        application = bot.create_application()
        
        if not application:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å bot application")
            return
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º event loop
        async def run_bot_async():
            async with application:
                await application.start()
                await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
                # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∂–∏–≤—ã–º
                await asyncio.Event().wait()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        loop.run_until_complete(run_bot_async())
        
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
        import traceback
        traceback.print_exc()


def start_bot_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å daemon=True"""
    bot_thread = threading.Thread(
        target=run_bot_in_thread,
        daemon=True,
        name="TelegramBotThread"
    )
    bot_thread.start()
    print("‚úÖ Bot thread started")
    return bot_thread


@asynccontextmanager
async def lifespan(app):
    """Lifespan events –¥–ª—è FastAPI - –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    print("üöÄ FastAPI starting up...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = start_bot_thread()
    
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    print("üõë FastAPI shutting down...")


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FastAPI app –∏ –¥–æ–±–∞–≤–ª—è–µ–º lifespan
from main import app as fastapi_app

# –ó–∞–º–µ–Ω—è–µ–º lifespan –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º app
fastapi_app.router.lifespan_context = lifespan


if __name__ == "__main__":
    import uvicorn
    
    print(f"üåê Starting FastAPI on 0.0.0.0:{PORT}")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI (–±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ lifespan)
    uvicorn.run(
        fastapi_app,
        host="0.0.0.0",
        port=PORT,
        log_level="info",
        access_log=True
    )