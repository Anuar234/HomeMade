#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Home Food Abu Dhabi
–ó–∞–ø—É—Å–∫–∞–µ—Ç API –∏ Telegram Bot –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import os
import sys
import subprocess
import time
import signal
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_colored(text, color=Colors.OKGREEN):
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    print(f"{color}{text}{Colors.ENDC}")

def check_env():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞"""
    if not Path('.env').exists():
        print_colored("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.WARNING)
        print_colored("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example", Colors.WARNING)
        
        if Path('.env.example').exists():
            response = input("\n‚ùì –°–æ–∑–¥–∞—Ç—å .env –∏–∑ .env.example? (y/n): ")
            if response.lower() == 'y':
                import shutil
                shutil.copy('.env.example', '.env')
                print_colored("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω!", Colors.OKGREEN)
                print_colored("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!", Colors.WARNING)
                return False
        return False
    return True

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not Path('homefood.db').exists():
        print_colored("‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", Colors.OKCYAN)
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required = ['fastapi', 'uvicorn', 'telegram']
    missing = []
    
    for package in required:
        try:
            __import__(package)
        except ImportError:
            missing.append(package)
    
    if missing:
        print_colored(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}", Colors.FAIL)
        print_colored("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install -r requirements.txt", Colors.WARNING)
        return False
    return True

def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   üçΩÔ∏è  Home Food Abu Dhabi           ‚ïë
    ‚ïë   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–æ–º–∞—à–Ω–µ–π –µ–¥—ã             ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print_colored(banner, Colors.HEADER)

def print_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
    info = """
    üì± API: http://localhost:8000
    üìÑ Docs: http://localhost:8000/docs
    ü§ñ Telegram Bot: –ó–∞–ø—É—â–µ–Ω
    üìä Database: homefood.db
    
    –ö–æ–º–∞–Ω–¥—ã:
    - Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    print_colored(info, Colors.OKCYAN)

def start_services():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    processes = []
    
    try:
        # –ó–∞–ø—É—Å–∫ API
        print_colored("\nüöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...", Colors.OKGREEN)
        api_process = subprocess.Popen(
            [sys.executable, "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        processes.append(("API", api_process))
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è API –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        
        # –ó–∞–ø—É—Å–∫ Telegram Bot
        print_colored("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...", Colors.OKGREEN)
        bot_process = subprocess.Popen(
            [sys.executable, "bot.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        processes.append(("Bot", bot_process))
        time.sleep(1)
        
        print_colored("\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!", Colors.OKGREEN)
        print_info()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        print_colored("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)...\n", Colors.OKCYAN)
        
        while True:
            for name, process in processes:
                if process.poll() is not None:
                    print_colored(f"‚ùå {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º {process.returncode}", Colors.FAIL)
                    # –ß–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏
                    stderr = process.stderr.read().decode('utf-8', errors='ignore')
                    if stderr:
                        print_colored(f"–û—à–∏–±–∫–∞:\n{stderr}", Colors.FAIL)
                    raise Exception(f"{name} crashed")
            time.sleep(1)
            
    except KeyboardInterrupt:
        print_colored("\n\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...", Colors.WARNING)
        for name, process in processes:
            print_colored(f"   –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...", Colors.WARNING)
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
        print_colored("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.OKGREEN)
        
    except Exception as e:
        print_colored(f"\n‚ùå –û—à–∏–±–∫–∞: {e}", Colors.FAIL)
        for name, process in processes:
            process.terminate()
        sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    print_colored("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...", Colors.OKCYAN)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_dependencies():
        sys.exit(1)
    
    if not check_env():
        print_colored("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞", Colors.FAIL)
        sys.exit(1)
    
    check_database()
    
    print_colored("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n", Colors.OKGREEN)
    
    # –ó–∞–ø—É—Å–∫
    try:
        start_services()
    except Exception as e:
        print_colored(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", Colors.FAIL)
        sys.exit(1)

if __name__ == "__main__":
    main()